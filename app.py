# ... [imports e configura√ß√µes iniciais permanecem iguais]

for idx, row in df_filtrado.iterrows():
    st.markdown("---")
    st.markdown(f"**üõçÔ∏è Produto:** {row['DESCRI√á√ÉO']}")
    st.markdown(f"**üè∑Ô∏è EAN:** {row.get('EAN', '---')}")
    st.markdown(f"**üî¢ C√≥digo Interno:** {row.get('COD.INT', '---')}")
    st.markdown(f"**üì¶ Estoque:** {row.get('ESTOQUE', '---')}")
    st.markdown(f"**üìÜ Dias sem movimenta√ß√£o:** {row.get('DIAS SEM MOVIMENTA√á√ÉO', '---')}")
    st.markdown(f"**üìç Se√ß√£o:** {row.get('SE√á√ÉO', '---')}")

    cod_int = row.get("COD.INT", "")
    valor_inicial = progresso_antigo.get(cod_int, {}).get("LOCAL INFORMADO", "")
    
    validade_raw = progresso_antigo.get(cod_int, {}).get("VALIDADE", "")
    validade_inicial = "" if pd.isna(validade_raw) else str(validade_raw)

    local = st.selectbox(
        f"üìç Onde est√° o produto ({row['DESCRI√á√ÉO']}):",
        ["", "SE√á√ÉO", "DEP√ìSITO", "ERRO DE ESTOQUE"],
        key=f"local_{idx}",
        index=["", "SE√á√ÉO", "DEP√ìSITO", "ERRO DE ESTOQUE"].index(valor_inicial) if valor_inicial in ["SE√á√ÉO", "DEP√ìSITO", "ERRO DE ESTOQUE"] else 0
    )

    validade = st.text_input(
        f"üìÖ Validade ({row['DESCRI√á√ÉO']}):",
        value=validade_inicial,
        key=f"validade_{idx}"
    )

    respostas.append({
        "USU√ÅRIO": nome_usuario,
        "DATA": data_preenchimento.strftime('%d/%m/%Y'),
        "PESQUISA": pesquisa_selecionada,
        "LOJA": row["LOJA"],
        "DESCRI√á√ÉO": row["DESCRI√á√ÉO"],
        "COD.INT": cod_int,
        "EAN": row.get("EAN", ""),
        "ESTOQUE": row.get("ESTOQUE", ""),
        "DIAS SEM MOVIMENTA√á√ÉO": row.get("DIAS SEM MOVIMENTA√á√ÉO", ""),
        "SE√á√ÉO": row.get("SE√á√ÉO", ""),
        "LOCAL INFORMADO": local,
        "VALIDADE": validade
    })
